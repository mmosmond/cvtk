"""

I use two snakemake files here; as we're often running one and editing the
other.

Notes:
 - Missing input files for rule <rule>: the simulationns have not been run
"""

# necessary to load cvtk code:
import os
import sys
import glob
nb_dir = os.path.split(os.path.split(os.getcwd())[0])[0]
if nb_dir not in sys.path:
    sys.path.append(nb_dir)

import pickle
import itertools 
import random
from multiprocessing import Pool
from collections import defaultdict
import pandas as pd
import numpy as np

from cvtk.cvtk import TemporalFreqs, TiledTemporalFreqs
from cvtk.cov import stack_temporal_covariances
import cvtk.slimfile as sf
from cvtk.process_sims import freqs_to_cov, covs_from_file
from cvtk.process_sims import covs_from_twopop


def round_sig(x, sig=4):
  if x == 0.:
    return 0
  return round(x, sig-int(np.floor(np.log10(np.abs(x))))-1)

# -------- Params ----------
SIMDIR = "../sims/"
OUTDIR = ""
NREPS = 30  # how many of total to run
region_length = 50e6

# ------- Shared Parameters -------
Ns = [1000]
nmus = [1e-8]

# ------- BGS Simlations -------
# BGS paramters
#Us = [0.25, 0.5, 0.75, 1, 1.25, 1.5]
Us = [0.5, 1, 1.5]
bgs_rbps = [1e-8, 1e-7]
selcoefs = [1e-1, 0.5e-1, 1e-2, 0]
fixed_to_nan = [False]
bgs_nreps = range(NREPS)


# we use the paremeters above to extract a subset of available simulation result
bgswf_sim_pattern = "bgs/bgs_{N}N_{rbp}rbp_{s}s_{nmu}nmu_{U}U_{nrep}_neutfreqs.tsv"

bgswf_covs_pattern = ("bgs/bgs_{N}N_{rbp}rbp_{s}s_{nmu}nmu_{U}U_{nrep}_with_fixations_covs.pkl")
bgswf_covs_results = expand(OUTDIR + bgswf_covs_pattern,
                            s=selcoefs, nmu=nmus, U=Us, rbp=bgs_rbps,
                            N=Ns, 
                            #fixed=fixed_to_nan, 
                            nrep=bgs_nreps)

rule bgswf_covs_all:
  input:
    bgswf_covs_results

rule bgswf_covs:
  input:
    SIMDIR + bgswf_sim_pattern
  output:
    OUTDIR + bgswf_covs_pattern
  run: 
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, s=wildcards.s,
                      nmu=wildcards.nmu, U=wildcards.U,
                      nrep=wildcards.nrep)
 
    neutfreqs_file = SIMDIR + bgswf_sim_pattern.format(**param_dict)
    outfile = OUTDIR + bgswf_covs_pattern.format(**param_dict)
    out = covs_from_file(neutfreqs_file, fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)
    
 

# ------- Two Pop/Sampled Line BGS Simlations -------
# BGS paramters
split_bgs_Us = [1]
split_bgs_rbps = [1e-8]
split_bgs_selcoefs = [0.05]
split_bgs_sampleN = [50, 100, 200, 1000]

split_bgs_outputs = ["subpop1_neutfreqs.tsv", "subpop2_neutfreqs.tsv"]

# we use the paremeters above to extract a subset of available simulation result
split_bgswf_pattern = ("split_bgs/split_bgs_{N}N_{rbp}rbp_{s}s_{nmu}nmu" + 
                           "_{U}U_{sampleN}sampleN_{nrep}_{sim_output}")

split_bgswf_covs_results = expand(OUTDIR + split_bgswf_pattern,
                                  s=split_bgs_selcoefs, nmu=nmus, 
                                  U=split_bgs_Us, rbp=split_bgs_rbps,
                                  N=Ns, 
                                  sampleN=split_bgs_sampleN, 
                                  nrep=bgs_nreps,
                                  sim_output=['with_fixations_covs.pkl'])

split_bgswf_covs_pattern = split_bgswf_pattern.replace("{sim_output}", "with_fixations_covs.pkl")

split_bgswf_pattern_subpops = [split_bgswf_pattern.replace("{sim_output}", f) for f in split_bgs_outputs]

rule split_bgswf_covs_all:
  input:
    split_bgswf_covs_results

rule split_bgswf_covs:
  input:
    SIMDIR + split_bgswf_pattern_subpops[0], 
    SIMDIR + split_bgswf_pattern_subpops[1]
  output:
    OUTDIR + split_bgswf_covs_pattern
  run: 
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, s=wildcards.s,
                      nmu=wildcards.nmu, U=wildcards.U,
                      sampleN=wildcards.sampleN,
                      nrep=wildcards.nrep)
    neutfreqs1_file = SIMDIR + split_bgswf_pattern_subpops[0].format(**param_dict)
    neutfreqs2_file = SIMDIR + split_bgswf_pattern_subpops[1].format(**param_dict)
    outfile = OUTDIR + split_bgswf_covs_pattern.format(**param_dict)
    out = covs_from_twopop((neutfreqs1_file, neutfreqs2_file), 
                           end = 55,
                           fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)
    
    
  
# ------- Sampled Line Simulation, Truncation Selection -------
# tail probabilities
#tail = [0.01]
tail = [0.01, 0.1, 0.25, 0.5]
gss_rbps = [1e-8]
alphas = [0.01] 
tmus = [1e-8]
nmus = [1e-8]
trunc_nreps = range(NREPS)
shifttime = [5]
sampleN = [50, 100, 200, 1000]
#sampleN = [50]
#shifttype = ['converge']
shifttype = ['converge', 'single', 'diverge']


trunc_outputs = ["subpop1_neutfreqs.tsv", "subpop2_neutfreqs.tsv"]

trunc_pattern = ("split_trunc/split_trunc_{N}N_{rbp}rbp_{alpha}alpha_{nmu}nmu_" + 
                 "{tmu}tmu_{tail}tail_{shifttime}shifttime_" + 
                 "{shifttype}shifttype_{sampleN}sampleN_{nrep}_{sim_output}")

trunc_pattern_subpops = [trunc_pattern.replace("{sim_output}", out) for out in trunc_outputs]


trunc_covs_results = expand(OUTDIR + trunc_pattern,
                            alpha=alphas, nmu=nmus, 
                            tmu=tmus, rbp=gss_rbps,
                            N=Ns, nrep=trunc_nreps,
                            shifttime=shifttime,
                            shifttype=shifttype,
                            sampleN=sampleN,
                            tail=tail,
                            sim_output=['with_fixations_covs.pkl'])

trunc_covs_pattern = trunc_pattern.replace("{sim_output}", "with_fixations_covs.pkl")


rule trunc_covs_all:
  input:
    trunc_covs_results

rule trunc_covs:
  input:
    SIMDIR + trunc_pattern_subpops[0],
    SIMDIR + trunc_pattern_subpops[1]
  output:
    OUTDIR + trunc_covs_pattern
  run:
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, alpha=wildcards.alpha,
                      nmu=wildcards.nmu, 
                      tmu=wildcards.tmu, 
                      tail=wildcards.tail,
                      shifttime=wildcards.shifttime,
                      shifttype=wildcards.shifttype,
                      sampleN=wildcards.sampleN,
                      nrep=wildcards.nrep)
    neutfreqs1_file = SIMDIR + trunc_pattern_subpops[0].format(**param_dict)
    neutfreqs2_file = SIMDIR + trunc_pattern_subpops[1].format(**param_dict)
    outfile = OUTDIR + trunc_covs_pattern.format(**param_dict)
    out = covs_from_twopop((neutfreqs1_file, neutfreqs2_file), 
                           end = 55,
                           fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)

 
# ------- Sampled Line Simulation, Exponential Fitness -------
# NOTE: a lot of this is directly borrowed  / modified from the simulation
# Snakefile

# the following is from the original snakefile for sims
def dict_product(dicts):
    return (dict(zip(dicts, x)) for x in itertools.product(*dicts.values()))

def Va_to_alphas(d):
    "For a given target Va and number of loci, return alphas and trait mutation rate" 
    # under neutrality, 
    Va, L, N = [d[v] for v in ('Va', 'L', 'N')]
    theta = L / (0.577 + np.log(2 * N))
    tmu = theta / (4 * N * region_length) if Va > 0. else 0.
    return dict(alpha = round_sig(np.sqrt(Va / theta)), tmu = round_sig(tmu))

Ls = [1, 10, 100, 1000]
#Vas = [0, 0.001, 0.002, 0.005, 0.01]
Vas = [0, 0.001, 0.005, 0.01]

# more reps for this
expfit_nreps = range(50)
expfit_sampleN = [50, 100, 200, 500, 1000]
#mag = [1, 0.1]
mag = [1]

split_exp_pattern = ("split_exp/split_exp_{N}N_{rbp}rbp_" + 
                   "{Va}Va_{alpha}alpha_{nmu}nmu_{tmu}tmu_" + 
                   "{L}L_{mag}mag_{shifttime}shifttime_" + 
                   "{shifttype}shifttype_{sampleN}sampleN_{nrep}_{sim_output}")
 
# trunc_outputs are same as split_exp, so re-using
expfit_params = list(dict_product(dict(Va = Vas, L = Ls, nmu=nmus, 
                                       mag = mag, shifttime = shifttime,
                                       sampleN = expfit_sampleN,
                                       shifttype = shifttype,
                                       sim_output = trunc_outputs,
                                       rbp = gss_rbps, N=Ns, nrep= expfit_nreps)))

# trunc_outputs are same as split_exp, so re-using
split_exp_pattern_subpops = [split_exp_pattern.replace("{sim_output}", out) for 
                             out in trunc_outputs]

split_exp_covs_pattern = split_exp_pattern.replace("{sim_output}", "with_fixations_covs.pkl") 

# build simulation files from the parameters 
split_exp_covs = []
for d in expfit_params:
  d.update(Va_to_alphas(d))
  file = split_exp_covs_pattern.format(**d)
  split_exp_covs.append(OUTDIR + file)


split_exp_outputs = ["subpop1_neutfreqs.tsv", "subpop2_neutfreqs.tsv"]

rule split_exp_covs_all:
  input:
    split_exp_covs

rule split_exp_covs:
  input:
    SIMDIR + split_exp_pattern_subpops[0],
    SIMDIR + split_exp_pattern_subpops[1]
  output:
    OUTDIR + split_exp_covs_pattern
  run:
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, alpha=wildcards.alpha,
                      Va=wildcards.Va, 
                      L=wildcards.L, 
                      mag=wildcards.mag, 
                      nmu=wildcards.nmu, 
                      tmu=wildcards.tmu, 
                      shifttime=wildcards.shifttime,
                      shifttype=wildcards.shifttype,
                      sampleN=wildcards.sampleN,
                      nrep=wildcards.nrep)
    neutfreqs1_file = SIMDIR + split_exp_pattern_subpops[0].format(**param_dict)
    neutfreqs2_file = SIMDIR + split_exp_pattern_subpops[1].format(**param_dict)
    outfile = OUTDIR + split_exp_covs_pattern.format(**param_dict)
    out = covs_from_twopop((neutfreqs1_file, neutfreqs2_file), 
                           end = 55,
                           fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)


# ------- Truncation Selection, Temporal Block Sampling -------

blockn = [10]
block_N = [1000]
block_rbp = [1e-8]
block_alpha  = [0.01]
block_nmu = [1e-8]
block_tmu = [1e-8]
block_tail = [0.1]
block_shifttime = [5]
block_shifttype = ['converge']
block_sampleN = [1000]

trunc_block_pattern = ("block_sampling_split_trunc_{N}N_{rbp}rbp_{alpha}alpha_{nmu}nmu_" + 
                       "{tmu}tmu_{tail}tail_{shifttime}shifttime_" + 
                       "{shifttype}shifttype_{sampleN}sampleN_{blockn}blockn_{nrep}_{sim_output}")

BLOCK_OUTDIR = "trunc_blocks/"

BLOCK_OUT_SUFFIX = 'with_fixations_covs.pkl'

trunc_covs_block_results = expand(BLOCK_OUTDIR + trunc_block_pattern,
                                  alpha=block_alpha, 
                                  nmu=block_nmu, 
                                  tmu=block_tmu, 
                                  rbp=block_rbp,
                                  N=block_N, nrep=trunc_nreps,
                                  shifttime=block_shifttime,
                                  shifttype=block_shifttype,
                                  sampleN=block_sampleN,
                                  tail=block_tail,
                                  blockn=blockn,
                                  sim_output=[BLOCK_OUT_SUFFIX])
 

rule trunc_covs_blocks_all:
  input:
    trunc_covs_block_results

rule trunc_covs_blocks:
  input:
    SIMDIR + trunc_pattern_subpops[0],
  output:
    BLOCK_OUTDIR + trunc_block_pattern.replace("{sim_output}", BLOCK_OUT_SUFFIX)
  run:
    param_dict = dict(nrep=wildcards.nrep, 
                      blockn=wildcards.blockn,
                      alpha=wildcards.alpha, 
                      nmu=wildcards.nmu, 
                      tmu=wildcards.tmu, 
                      rbp=wildcards.rbp,
                      N=wildcards.N, 
                      shifttime=wildcards.shifttime,
                      shifttype=wildcards.shifttype,
                      sampleN=wildcards.sampleN,
                      tail=wildcards.tail)
    neutfreqs_file = SIMDIR + trunc_pattern_subpops[0].format(**param_dict)
    outfile = BLOCK_OUTDIR + trunc_block_pattern.replace("{sim_output}", BLOCK_OUT_SUFFIX).format(**param_dict)
    sampled_gens = np.arange(10005, 10005 + 100, int(wildcards.blockn))
    out = covs_from_file(neutfreqs_file, sampled_gens=sampled_gens, fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)
  


# ------- Exponential Fitness Function, Temporal Block Sampling -------

block_exp_pattern = ("block_sampling_split_exp_{N}N_{rbp}rbp_" + 
                    "{Va}Va_{alpha}alpha_{nmu}nmu_{tmu}tmu_" + 
                    "{L}L_{mag}mag_{shifttime}shifttime_" + 
                    "{shifttype}shifttype_{sampleN}sampleN_{blockn}blockn_{nrep}_{sim_output}")

expfit_blockn = [1, 10]
block_expfit_params = list(dict_product(dict(Va = [0.01], L = [1000], nmu=[1e-8], 
                                        mag = [1], shifttime = [0],
                                        sampleN = [1000],
                                        shifttype = ['single'],
                                        sim_output = trunc_outputs,
                                        blockn=expfit_blockn,
                                        rbp = [1e-8], N=[1000], nrep=expfit_nreps)))

EXPFIT_BLOCK_OUTDIR = 'expfit_blocks/'

# build simulation files from the parameters 
block_exp_covs = []
for d in block_expfit_params:
  d.update(Va_to_alphas(d))
  file = block_exp_pattern.replace("{sim_output}", BLOCK_OUT_SUFFIX).format(**d)
  block_exp_covs.append(EXPFIT_BLOCK_OUTDIR + file)

rule expfit_covs_blocks_all:
  input:
    block_exp_covs

rule expfit_covs_blocks:
  input:
    SIMDIR + split_exp_pattern_subpops[0],
  output:
    EXPFIT_BLOCK_OUTDIR+ block_exp_pattern.replace("{sim_output}", BLOCK_OUT_SUFFIX)
  run:
     param_dict = dict(nrep=wildcards.nrep, 
                      blockn=wildcards.blockn,
                      alpha=wildcards.alpha, 
                      Va=wildcards.Va,
                      L=wildcards.L,
                      mag=wildcards.mag,
                      nmu=wildcards.nmu, 
                      tmu=wildcards.tmu, 
                      rbp=wildcards.rbp,
                      N=wildcards.N, 
                      shifttime=wildcards.shifttime,
                      shifttype=wildcards.shifttype,
                      sampleN=wildcards.sampleN)
     neutfreqs_file = SIMDIR + split_exp_pattern_subpops[0].format(**param_dict)
     outfile = EXPFIT_BLOCK_OUTDIR + block_exp_pattern.replace("{sim_output}", BLOCK_OUT_SUFFIX).format(**param_dict)
     sampled_gens = np.arange(10000, 10000 + 100, int(wildcards.blockn))
     out = covs_from_file(neutfreqs_file, sampled_gens=sampled_gens, fixed_to_nan=False)
     with open(outfile, 'wb') as f:
         pickle.dump(out, f)


rule all:
  input:
    trunc_covs_results + bgswf_covs_results + trunc_covs_block_results + split_exp_covs + block_exp_covs + split_bgswf_covs_results
