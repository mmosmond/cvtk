"""

I use two snakemake files here; as we're often running one and editing the
other.

Notes:
 - Missing input files for rule <rule>: the simulationns have not been run
"""

# necessary to load cvtk code:
import os
import sys
import glob
nb_dir = os.path.split(os.path.split(os.getcwd())[0])[0]
if nb_dir not in sys.path:
    sys.path.append(nb_dir)

import pickle
import random
from multiprocessing import Pool
from collections import defaultdict
import pandas as pd
import numpy as np

from cvtk.cvtk import TemporalFreqs, TiledTemporalFreqs
from cvtk.cov import stack_temporal_covariances
import cvtk.slimfile as sf
from cvtk.process_sims import freqs_to_cov, covs_from_file
from cvtk.process_sims import covs_from_twopop

# -------- Params ----------
SIMDIR = "../sims/"
OUTDIR = ""
NREPS = 30  # how many of total to run

# ------- Shared Parameters -------
Ns = [1000]
nmus = [1e-8]



# ------- BGS Simlations -------
# BGS paramters
#Us = [0.25, 0.5, 0.75, 1, 1.25, 1.5]
Us = [0.5, 1, 1.5]
bgs_rbps = [1e-8]
selcoefs = [1e-1, 0.5e-1, 1e-2, 0]
fixed_to_nan = [False]
bgs_nreps = range(NREPS)


# we use the paremeters above to extract a subset of available simulation result
bgswf_sim_pattern = "bgs/bgs_{N}N_{rbp}rbp_{s}s_{nmu}nmu_{U}U_{nrep}_neutfreqs.tsv"

bgswf_covs_pattern = ("bgs/bgs_{N}N_{rbp}rbp_{s}s_{nmu}nmu_{U}U_{nrep}_with_fixations_covs.pkl")
bgswf_covs_results = expand(OUTDIR + bgswf_covs_pattern,
                            s=selcoefs, nmu=nmus, U=Us, rbp=bgs_rbps,
                            N=Ns, 
                            #fixed=fixed_to_nan, 
                            nrep=bgs_nreps)

rule bgswf_covs_all:
  input:
    bgswf_covs_results

rule bgswf_covs:
  input:
    SIMDIR + bgswf_sim_pattern
  output:
    OUTDIR + bgswf_covs_pattern
  run: 
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, s=wildcards.s,
                      nmu=wildcards.nmu, U=wildcards.U,
                      nrep=wildcards.nrep)
 
    neutfreqs_file = SIMDIR + bgswf_sim_pattern.format(**param_dict)
    outfile = OUTDIR + bgswf_covs_pattern.format(**param_dict)
    out = covs_from_file(neutfreqs_file, fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)
    
    
  
# ------- Sampled Line Simualtions, Truncation Selection -------
# tail probabilities
#tail = [0.01]
tail = [0.01, 0.1, 0.25, 0.5]
gss_rbps = [1e-8]
alphas = [0.01] 
tmus = [1e-8]
nmus = [1e-8]
trunc_nreps = range(NREPS)
shifttime = [5]
sampleN = [50, 100, 200, 1000]
#sampleN = [50]
#shifttype = ['converge']
shifttype = ['converge', 'single', 'diverge']


trunc_outputs = ["subpop1_neutfreqs.tsv", "subpop2_neutfreqs.tsv"]

trunc_pattern = ("split_trunc/split_trunc_{N}N_{rbp}rbp_{alpha}alpha_{nmu}nmu_" + 
                 "{tmu}tmu_{tail}tail_{shifttime}shifttime_" + 
                 "{shifttype}shifttype_{sampleN}sampleN_{nrep}_{sim_output}")

trunc_pattern_subpops = [trunc_pattern.replace("{sim_output}", out) for out in trunc_outputs]


trunc_covs_results = expand(OUTDIR + trunc_pattern,
                            alpha=alphas, nmu=nmus, 
                            tmu=tmus, rbp=gss_rbps,
                            N=Ns, nrep=trunc_nreps,
                            shifttime=shifttime,
                            shifttype=shifttype,
                            sampleN=sampleN,
                            tail=tail,
                            sim_output=['with_fixations_covs.pkl'])

trunc_covs_pattern = trunc_pattern.replace("{sim_output}", "with_fixations_covs.pkl")


rule trunc_covs_all:
  input:
    trunc_covs_results

rule trunc_covs:
  input:
    SIMDIR + trunc_pattern_subpops[0],
    SIMDIR + trunc_pattern_subpops[1]
  output:
    OUTDIR + trunc_covs_pattern
  run:
    param_dict = dict(N=wildcards.N, rbp=wildcards.rbp, alpha=wildcards.alpha,
                      nmu=wildcards.nmu, 
                      tmu=wildcards.tmu, 
                      tail=wildcards.tail,
                      shifttime=wildcards.shifttime,
                      shifttype=wildcards.shifttype,
                      sampleN=wildcards.sampleN,
                      nrep=wildcards.nrep)
    neutfreqs1_file = SIMDIR + trunc_pattern_subpops[0].format(**param_dict)
    neutfreqs2_file = SIMDIR + trunc_pattern_subpops[1].format(**param_dict)
    outfile = OUTDIR + trunc_covs_pattern.format(**param_dict)
    out = covs_from_twopop((neutfreqs1_file, neutfreqs2_file), 
                           end = 55,
                           fixed_to_nan=False)
    with open(outfile, 'wb') as f:
        pickle.dump(out, f)


rule all:
  input:
    trunc_covs_results + bgswf_covs_results
